(certs) {
    tls /etc/certificates/certificate.chained.crt /etc/certificates/privkey.pem
}

(config) {

    log {
        output file /var/log/caddy/access.log {
            # see /etc/logrotate.d/caddy
            roll_disabled
        }
        format json {
            time_format rfc3339
        }
    }

    root * /srv/search/web

    # translating the intent of the nginx config, we want:
    # 1. any request leading with a dot '.', a slash in it and ending with '.php' is 403 (Forbidden)
    # 2. to serve up any files inside "/srv/search/web/" defaulting to app_<env>.php if no match.
    # 3. to send requests for "/app_<env>.php" to php-fpm
    # 4. to 404 requests for "/app_<anythingelse>.php"

    # note: the directives below are wrapped in 'handle' to ensure their order of evaluation matches the file,
    # otherwse Caddy re-orders them. This approach is more nginx-like. See:
    # - https://caddyserver.com/docs/caddyfile/directives#directive-order
    # - https://caddyserver.com/docs/caddyfile/directives/handle#handle

    # 1. any request leading with a dot '.', a slash in it and ending with '.php' is 403 (Forbidden):
    # ./foo.php
    # ./.foo.php
    # ././foo.php
    # ../foo.php

    # The intent is to prevent path traversal for php files, like ./../src/bootstrap.php.
    # because no other php files are being served let's just disallow *all* requests to *all* php files.
    @no-direct-php-requests {
       path *.php
    }
    handle @no-direct-php-requests {
        error 403
    }

    handle {

        # 2. to serve up any files inside "/srv/search/web/" if there is a match, defaulting to app_<env>.php if no match.
        # 'try_files' works by testing a set of files and using the last one if no match is found.
        # in this case, all requests will fail to match and be (internally) rewritten to "/app_<env>.php",
        # preserving any query params.
        # - https://caddyserver.com/docs/caddyfile/directives/try_files
        # - https://caddyserver.com/docs/caddyfile/matchers#file
        # - https://docs.nginx.com/nginx/admin-guide/web-server/serving-static-content/#trying-several-options

        try_files {path} /app_{{ pillar.elife.env }}.php?{query}

        # 3. send requests for "/app_<env>.php" to php-fpm
        # Caddy has no "internal" equivalent (handle rewritten requests only), however we should be safe.

        #location ~ ^/app_{{ pillar.elife.env }}\.php(/|$) {
        #    [...]
        #    fastcgi_pass unix:/var/php-fpm.sock;
        #    internal;
        #}

        # matches (path only, no query params):
        # /app_prod.php
        # /app_prod.php/
        # /app_prod.php/foo

        @app-env {
            path_regexp ^/app_{{ pillar.elife.env }}\.php(/|$)
        }
        handle @app-env {
            php_fastcgi unix//var/php-fpm.sock {
                # these are supported out of the box:
                #fastcgi_split_path_info ^(.+\.php)(/.+)$;
                #include fastcgi_params;
                #fastcgi_param SCRIPT_FILENAME $request_filename;
                #fastcgi_param DOCUMENT_ROOT $realpath_root;
                # see:
                # - https://caddyserver.com/docs/caddyfile/directives/php_fastcgi#env
                # - https://github.com/caddyserver/caddy/blob/51e3fdba7738e577b5ccfbad5bd7712fa594afc0/modules/caddyhttp/reverseproxy/fastcgi/fastcgi.go#L289

                # not sure if 'env' and 'fastcgi_param' are equivalent.
                # looking at some php projects, they are using `getenv` to access it, so I guess so.
                #fastcgi_param ENVIRONMENT_NAME {{ pillar.elife.env }};
                env ENVIRONMENT_NAME {{ pillar.elife.env }}

                # "Determines whether FastCGI server responses with codes greater than or equal to 300 should be passed to a client or be intercepted and redirected to nginx for processing with the error_page directive."
                # I see no extra additional error handling in nginx for these errors (for example, using a fixed 404.html page).
                # no equivalent for Caddy so I guess we'll have to be ok.
                #fastcgi_intercept_errors on;

                # "enables capturing and logging of any messages sent by the upstream fastcgi server on stderr."
                # new, capturing these might be insightful
                capture_stderr true
            }
        }

        # 4. 404 any matching requests for "/app_<not-our-env>.php" instead of serving the file.

        # this is the equivalent in Caddy:
        #@not-app-env {
        #    path_regexp ^/app_.*\.php$
        #}
        #handle @not-app-env {
        #    error 404
        #}

        # however, because we're no longer matching any php files (see 1.), this is redundant.
    }
}

{% set h1 = salt['elife.cfg']('project.project_hostname') %}{# bp.elifesciences.org -#}
{% set h2 = salt['elife.cfg']('project.full_hostname') %}{# prod--bp.elifesciences.org -#}
{% set h3 = salt['elife.cfg']('project.int_project_hostname') %}{# bp.elife.internal -#}
{% set h4 = salt['elife.cfg']('project.int_full_hostname') %}{# prod--bp.elife.internal -#}

http://localhost http://127.0.0.1 {% if h3 %}http://{{ h3 }} {% endif %}{% if h4 %}http://{{ h4 }} {% endif %}{
    import config
}

{% if salt['elife.cfg']('cfn.outputs.DomainName') -%}
{% if h1 %}https://{{ h1 }} {% endif %}{% if h2 %}https://{{ h2 }} {% endif %}{
    import certs
    import config
}
{% endif %}

